// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/passport/v1/passport.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAccountRequestMultiError, or nil if none found.
func (m *CreateAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAccountRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAccountRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAccountRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAccountRequestMultiError(errors)
	}

	return nil
}

// CreateAccountRequestMultiError is an error wrapping multiple validation
// errors returned by CreateAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAccountRequestMultiError) AllErrors() []error { return m }

// CreateAccountRequestValidationError is the validation error returned by
// CreateAccountRequest.Validate if the designated constraints aren't met.
type CreateAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountRequestValidationError) ErrorName() string {
	return "CreateAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountRequestValidationError{}

// Validate checks the field values on CreateAccountReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAccountReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAccountReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAccountReplyMultiError, or nil if none found.
func (m *CreateAccountReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAccountReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ok

	if len(errors) > 0 {
		return CreateAccountReplyMultiError(errors)
	}

	return nil
}

// CreateAccountReplyMultiError is an error wrapping multiple validation errors
// returned by CreateAccountReply.ValidateAll() if the designated constraints
// aren't met.
type CreateAccountReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAccountReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAccountReplyMultiError) AllErrors() []error { return m }

// CreateAccountReplyValidationError is the validation error returned by
// CreateAccountReply.Validate if the designated constraints aren't met.
type CreateAccountReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountReplyValidationError) ErrorName() string {
	return "CreateAccountReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccountReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountReplyValidationError{}

// Validate checks the field values on VerifyEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyEmailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyEmailRequestMultiError, or nil if none found.
func (m *VerifyEmailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyEmailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VerifyEmailRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VerifyEmailRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VerifyEmailRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VerifyEmailRequestMultiError(errors)
	}

	return nil
}

// VerifyEmailRequestMultiError is an error wrapping multiple validation errors
// returned by VerifyEmailRequest.ValidateAll() if the designated constraints
// aren't met.
type VerifyEmailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyEmailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyEmailRequestMultiError) AllErrors() []error { return m }

// VerifyEmailRequestValidationError is the validation error returned by
// VerifyEmailRequest.Validate if the designated constraints aren't met.
type VerifyEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyEmailRequestValidationError) ErrorName() string {
	return "VerifyEmailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyEmailRequestValidationError{}

// Validate checks the field values on VerifyEmailReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VerifyEmailReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyEmailReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyEmailReplyMultiError, or nil if none found.
func (m *VerifyEmailReply) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyEmailReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return VerifyEmailReplyMultiError(errors)
	}

	return nil
}

// VerifyEmailReplyMultiError is an error wrapping multiple validation errors
// returned by VerifyEmailReply.ValidateAll() if the designated constraints
// aren't met.
type VerifyEmailReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyEmailReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyEmailReplyMultiError) AllErrors() []error { return m }

// VerifyEmailReplyValidationError is the validation error returned by
// VerifyEmailReply.Validate if the designated constraints aren't met.
type VerifyEmailReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyEmailReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyEmailReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyEmailReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyEmailReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyEmailReplyValidationError) ErrorName() string { return "VerifyEmailReplyValidationError" }

// Error satisfies the builtin error interface
func (e VerifyEmailReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyEmailReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyEmailReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyEmailReplyValidationError{}

// Validate checks the field values on GetPublicKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPublicKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPublicKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPublicKeyRequestMultiError, or nil if none found.
func (m *GetPublicKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPublicKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetPublicKeyRequestMultiError(errors)
	}

	return nil
}

// GetPublicKeyRequestMultiError is an error wrapping multiple validation
// errors returned by GetPublicKeyRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPublicKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPublicKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPublicKeyRequestMultiError) AllErrors() []error { return m }

// GetPublicKeyRequestValidationError is the validation error returned by
// GetPublicKeyRequest.Validate if the designated constraints aren't met.
type GetPublicKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPublicKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPublicKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPublicKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPublicKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPublicKeyRequestValidationError) ErrorName() string {
	return "GetPublicKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPublicKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPublicKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPublicKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPublicKeyRequestValidationError{}

// Validate checks the field values on GetPublicKeyReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPublicKeyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPublicKeyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPublicKeyReplyMultiError, or nil if none found.
func (m *GetPublicKeyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPublicKeyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Hash

	// no validation rules for Key

	if len(errors) > 0 {
		return GetPublicKeyReplyMultiError(errors)
	}

	return nil
}

// GetPublicKeyReplyMultiError is an error wrapping multiple validation errors
// returned by GetPublicKeyReply.ValidateAll() if the designated constraints
// aren't met.
type GetPublicKeyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPublicKeyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPublicKeyReplyMultiError) AllErrors() []error { return m }

// GetPublicKeyReplyValidationError is the validation error returned by
// GetPublicKeyReply.Validate if the designated constraints aren't met.
type GetPublicKeyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPublicKeyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPublicKeyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPublicKeyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPublicKeyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPublicKeyReplyValidationError) ErrorName() string {
	return "GetPublicKeyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetPublicKeyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPublicKeyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPublicKeyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPublicKeyReplyValidationError{}

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}

	return nil
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on LoginReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginReplyMultiError, or
// nil if none found.
func (m *LoginReply) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ok

	// no validation rules for Token

	if len(errors) > 0 {
		return LoginReplyMultiError(errors)
	}

	return nil
}

// LoginReplyMultiError is an error wrapping multiple validation errors
// returned by LoginReply.ValidateAll() if the designated constraints aren't met.
type LoginReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginReplyMultiError) AllErrors() []error { return m }

// LoginReplyValidationError is the validation error returned by
// LoginReply.Validate if the designated constraints aren't met.
type LoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReplyValidationError) ErrorName() string { return "LoginReplyValidationError" }

// Error satisfies the builtin error interface
func (e LoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReplyValidationError{}

// Validate checks the field values on ChangePasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangePasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangePasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangePasswordRequestMultiError, or nil if none found.
func (m *ChangePasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangePasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangePasswordRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangePasswordRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangePasswordRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangePasswordRequestMultiError(errors)
	}

	return nil
}

// ChangePasswordRequestMultiError is an error wrapping multiple validation
// errors returned by ChangePasswordRequest.ValidateAll() if the designated
// constraints aren't met.
type ChangePasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangePasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangePasswordRequestMultiError) AllErrors() []error { return m }

// ChangePasswordRequestValidationError is the validation error returned by
// ChangePasswordRequest.Validate if the designated constraints aren't met.
type ChangePasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangePasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangePasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangePasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangePasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangePasswordRequestValidationError) ErrorName() string {
	return "ChangePasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangePasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangePasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangePasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangePasswordRequestValidationError{}

// Validate checks the field values on ChangePasswordReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangePasswordReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangePasswordReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangePasswordReplyMultiError, or nil if none found.
func (m *ChangePasswordReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangePasswordReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ok

	// no validation rules for Token

	if len(errors) > 0 {
		return ChangePasswordReplyMultiError(errors)
	}

	return nil
}

// ChangePasswordReplyMultiError is an error wrapping multiple validation
// errors returned by ChangePasswordReply.ValidateAll() if the designated
// constraints aren't met.
type ChangePasswordReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangePasswordReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangePasswordReplyMultiError) AllErrors() []error { return m }

// ChangePasswordReplyValidationError is the validation error returned by
// ChangePasswordReply.Validate if the designated constraints aren't met.
type ChangePasswordReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangePasswordReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangePasswordReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangePasswordReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangePasswordReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangePasswordReplyValidationError) ErrorName() string {
	return "ChangePasswordReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ChangePasswordReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangePasswordReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangePasswordReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangePasswordReplyValidationError{}

// Validate checks the field values on CreateAccountRequest_CreateAccountBody
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateAccountRequest_CreateAccountBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateAccountRequest_CreateAccountBody with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CreateAccountRequest_CreateAccountBodyMultiError, or nil if none found.
func (m *CreateAccountRequest_CreateAccountBody) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAccountRequest_CreateAccountBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEmail()) > 32 {
		err := CreateAccountRequest_CreateAccountBodyValidationError{
			field:  "Email",
			reason: "value length must be at most 32 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = CreateAccountRequest_CreateAccountBodyValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 64 || l > 256 {
		err := CreateAccountRequest_CreateAccountBodyValidationError{
			field:  "Password",
			reason: "value length must be between 64 and 256 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetHash()) != 16 {
		err := CreateAccountRequest_CreateAccountBodyValidationError{
			field:  "Hash",
			reason: "value length must be 16 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	// no validation rules for Token

	if len(errors) > 0 {
		return CreateAccountRequest_CreateAccountBodyMultiError(errors)
	}

	return nil
}

func (m *CreateAccountRequest_CreateAccountBody) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *CreateAccountRequest_CreateAccountBody) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// CreateAccountRequest_CreateAccountBodyMultiError is an error wrapping
// multiple validation errors returned by
// CreateAccountRequest_CreateAccountBody.ValidateAll() if the designated
// constraints aren't met.
type CreateAccountRequest_CreateAccountBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAccountRequest_CreateAccountBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAccountRequest_CreateAccountBodyMultiError) AllErrors() []error { return m }

// CreateAccountRequest_CreateAccountBodyValidationError is the validation
// error returned by CreateAccountRequest_CreateAccountBody.Validate if the
// designated constraints aren't met.
type CreateAccountRequest_CreateAccountBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountRequest_CreateAccountBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountRequest_CreateAccountBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountRequest_CreateAccountBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountRequest_CreateAccountBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountRequest_CreateAccountBodyValidationError) ErrorName() string {
	return "CreateAccountRequest_CreateAccountBodyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccountRequest_CreateAccountBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountRequest_CreateAccountBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountRequest_CreateAccountBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountRequest_CreateAccountBodyValidationError{}

// Validate checks the field values on VerifyEmailRequest_VerifyEmailBody with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *VerifyEmailRequest_VerifyEmailBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyEmailRequest_VerifyEmailBody
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// VerifyEmailRequest_VerifyEmailBodyMultiError, or nil if none found.
func (m *VerifyEmailRequest_VerifyEmailBody) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyEmailRequest_VerifyEmailBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCode()) != 32 {
		err := VerifyEmailRequest_VerifyEmailBodyValidationError{
			field:  "Code",
			reason: "value length must be 32 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if utf8.RuneCountInString(m.GetEmail()) > 32 {
		err := VerifyEmailRequest_VerifyEmailBodyValidationError{
			field:  "Email",
			reason: "value length must be at most 32 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = VerifyEmailRequest_VerifyEmailBodyValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return VerifyEmailRequest_VerifyEmailBodyMultiError(errors)
	}

	return nil
}

func (m *VerifyEmailRequest_VerifyEmailBody) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *VerifyEmailRequest_VerifyEmailBody) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// VerifyEmailRequest_VerifyEmailBodyMultiError is an error wrapping multiple
// validation errors returned by
// VerifyEmailRequest_VerifyEmailBody.ValidateAll() if the designated
// constraints aren't met.
type VerifyEmailRequest_VerifyEmailBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyEmailRequest_VerifyEmailBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyEmailRequest_VerifyEmailBodyMultiError) AllErrors() []error { return m }

// VerifyEmailRequest_VerifyEmailBodyValidationError is the validation error
// returned by VerifyEmailRequest_VerifyEmailBody.Validate if the designated
// constraints aren't met.
type VerifyEmailRequest_VerifyEmailBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyEmailRequest_VerifyEmailBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyEmailRequest_VerifyEmailBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyEmailRequest_VerifyEmailBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyEmailRequest_VerifyEmailBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyEmailRequest_VerifyEmailBodyValidationError) ErrorName() string {
	return "VerifyEmailRequest_VerifyEmailBodyValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyEmailRequest_VerifyEmailBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyEmailRequest_VerifyEmailBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyEmailRequest_VerifyEmailBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyEmailRequest_VerifyEmailBodyValidationError{}

// Validate checks the field values on LoginRequest_LoginBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginRequest_LoginBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest_LoginBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginRequest_LoginBodyMultiError, or nil if none found.
func (m *LoginRequest_LoginBody) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest_LoginBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEmail()) > 32 {
		err := LoginRequest_LoginBodyValidationError{
			field:  "Email",
			reason: "value length must be at most 32 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = LoginRequest_LoginBodyValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 64 || l > 256 {
		err := LoginRequest_LoginBodyValidationError{
			field:  "Password",
			reason: "value length must be between 64 and 256 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetHash()) != 16 {
		err := LoginRequest_LoginBodyValidationError{
			field:  "Hash",
			reason: "value length must be 16 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	// no validation rules for Token

	if len(errors) > 0 {
		return LoginRequest_LoginBodyMultiError(errors)
	}

	return nil
}

func (m *LoginRequest_LoginBody) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *LoginRequest_LoginBody) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// LoginRequest_LoginBodyMultiError is an error wrapping multiple validation
// errors returned by LoginRequest_LoginBody.ValidateAll() if the designated
// constraints aren't met.
type LoginRequest_LoginBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequest_LoginBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequest_LoginBodyMultiError) AllErrors() []error { return m }

// LoginRequest_LoginBodyValidationError is the validation error returned by
// LoginRequest_LoginBody.Validate if the designated constraints aren't met.
type LoginRequest_LoginBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequest_LoginBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequest_LoginBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequest_LoginBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequest_LoginBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequest_LoginBodyValidationError) ErrorName() string {
	return "LoginRequest_LoginBodyValidationError"
}

// Error satisfies the builtin error interface
func (e LoginRequest_LoginBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest_LoginBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequest_LoginBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequest_LoginBodyValidationError{}

// Validate checks the field values on ChangePasswordRequest_ChangePasswordBody
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ChangePasswordRequest_ChangePasswordBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ChangePasswordRequest_ChangePasswordBody with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ChangePasswordRequest_ChangePasswordBodyMultiError, or nil if none found.
func (m *ChangePasswordRequest_ChangePasswordBody) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangePasswordRequest_ChangePasswordBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetOldPassword()); l < 64 || l > 256 {
		err := ChangePasswordRequest_ChangePasswordBodyValidationError{
			field:  "OldPassword",
			reason: "value length must be between 64 and 256 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetNewPassword()); l < 64 || l > 256 {
		err := ChangePasswordRequest_ChangePasswordBodyValidationError{
			field:  "NewPassword",
			reason: "value length must be between 64 and 256 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetHash()) != 16 {
		err := ChangePasswordRequest_ChangePasswordBodyValidationError{
			field:  "Hash",
			reason: "value length must be 16 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return ChangePasswordRequest_ChangePasswordBodyMultiError(errors)
	}

	return nil
}

// ChangePasswordRequest_ChangePasswordBodyMultiError is an error wrapping
// multiple validation errors returned by
// ChangePasswordRequest_ChangePasswordBody.ValidateAll() if the designated
// constraints aren't met.
type ChangePasswordRequest_ChangePasswordBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangePasswordRequest_ChangePasswordBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangePasswordRequest_ChangePasswordBodyMultiError) AllErrors() []error { return m }

// ChangePasswordRequest_ChangePasswordBodyValidationError is the validation
// error returned by ChangePasswordRequest_ChangePasswordBody.Validate if the
// designated constraints aren't met.
type ChangePasswordRequest_ChangePasswordBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangePasswordRequest_ChangePasswordBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangePasswordRequest_ChangePasswordBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangePasswordRequest_ChangePasswordBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangePasswordRequest_ChangePasswordBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangePasswordRequest_ChangePasswordBodyValidationError) ErrorName() string {
	return "ChangePasswordRequest_ChangePasswordBodyValidationError"
}

// Error satisfies the builtin error interface
func (e ChangePasswordRequest_ChangePasswordBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangePasswordRequest_ChangePasswordBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangePasswordRequest_ChangePasswordBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangePasswordRequest_ChangePasswordBodyValidationError{}
