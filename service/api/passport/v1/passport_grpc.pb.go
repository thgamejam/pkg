// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: api/passport/v1/passport.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PassportClient is the client API for Passport service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PassportClient interface {
	CreatePassport(ctx context.Context, in *CreatePassportRequest, opts ...grpc.CallOption) (*CreatePassportReply, error)
	DeletePassport(ctx context.Context, in *DeletePassportRequest, opts ...grpc.CallOption) (*DeletePassportReply, error)
	GetPassport(ctx context.Context, in *GetPassportRequest, opts ...grpc.CallOption) (*GetPassportReply, error)
	UpdatePassport(ctx context.Context, in *UpdatePassportRequest, opts ...grpc.CallOption) (*UpdatePassportReply, error)
	ListPassport(ctx context.Context, in *ListPassportRequest, opts ...grpc.CallOption) (*ListPassportReply, error)
}

type passportClient struct {
	cc grpc.ClientConnInterface
}

func NewPassportClient(cc grpc.ClientConnInterface) PassportClient {
	return &passportClient{cc}
}

func (c *passportClient) CreatePassport(ctx context.Context, in *CreatePassportRequest, opts ...grpc.CallOption) (*CreatePassportReply, error) {
	out := new(CreatePassportReply)
	err := c.cc.Invoke(ctx, "/passport.v1.Passport/CreatePassport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportClient) DeletePassport(ctx context.Context, in *DeletePassportRequest, opts ...grpc.CallOption) (*DeletePassportReply, error) {
	out := new(DeletePassportReply)
	err := c.cc.Invoke(ctx, "/passport.v1.Passport/DeletePassport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportClient) GetPassport(ctx context.Context, in *GetPassportRequest, opts ...grpc.CallOption) (*GetPassportReply, error) {
	out := new(GetPassportReply)
	err := c.cc.Invoke(ctx, "/passport.v1.Passport/GetPassport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportClient) UpdatePassport(ctx context.Context, in *UpdatePassportRequest, opts ...grpc.CallOption) (*UpdatePassportReply, error) {
	out := new(UpdatePassportReply)
	err := c.cc.Invoke(ctx, "/passport.v1.Passport/UpdatePassport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportClient) ListPassport(ctx context.Context, in *ListPassportRequest, opts ...grpc.CallOption) (*ListPassportReply, error) {
	out := new(ListPassportReply)
	err := c.cc.Invoke(ctx, "/passport.v1.Passport/ListPassport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PassportServer is the server API for Passport service.
// All implementations must embed UnimplementedPassportServer
// for forward compatibility
type PassportServer interface {
	CreatePassport(context.Context, *CreatePassportRequest) (*CreatePassportReply, error)
	DeletePassport(context.Context, *DeletePassportRequest) (*DeletePassportReply, error)
	GetPassport(context.Context, *GetPassportRequest) (*GetPassportReply, error)
	UpdatePassport(context.Context, *UpdatePassportRequest) (*UpdatePassportReply, error)
	ListPassport(context.Context, *ListPassportRequest) (*ListPassportReply, error)
	mustEmbedUnimplementedPassportServer()
}

// UnimplementedPassportServer must be embedded to have forward compatible implementations.
type UnimplementedPassportServer struct {
}

func (UnimplementedPassportServer) CreatePassport(context.Context, *CreatePassportRequest) (*CreatePassportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePassport not implemented")
}
func (UnimplementedPassportServer) DeletePassport(context.Context, *DeletePassportRequest) (*DeletePassportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePassport not implemented")
}
func (UnimplementedPassportServer) GetPassport(context.Context, *GetPassportRequest) (*GetPassportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPassport not implemented")
}
func (UnimplementedPassportServer) UpdatePassport(context.Context, *UpdatePassportRequest) (*UpdatePassportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassport not implemented")
}
func (UnimplementedPassportServer) ListPassport(context.Context, *ListPassportRequest) (*ListPassportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPassport not implemented")
}
func (UnimplementedPassportServer) mustEmbedUnimplementedPassportServer() {}

// UnsafePassportServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PassportServer will
// result in compilation errors.
type UnsafePassportServer interface {
	mustEmbedUnimplementedPassportServer()
}

func RegisterPassportServer(s grpc.ServiceRegistrar, srv PassportServer) {
	s.RegisterService(&Passport_ServiceDesc, srv)
}

func _Passport_CreatePassport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePassportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportServer).CreatePassport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/passport.v1.Passport/CreatePassport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportServer).CreatePassport(ctx, req.(*CreatePassportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Passport_DeletePassport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePassportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportServer).DeletePassport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/passport.v1.Passport/DeletePassport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportServer).DeletePassport(ctx, req.(*DeletePassportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Passport_GetPassport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPassportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportServer).GetPassport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/passport.v1.Passport/GetPassport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportServer).GetPassport(ctx, req.(*GetPassportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Passport_UpdatePassport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePassportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportServer).UpdatePassport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/passport.v1.Passport/UpdatePassport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportServer).UpdatePassport(ctx, req.(*UpdatePassportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Passport_ListPassport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPassportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportServer).ListPassport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/passport.v1.Passport/ListPassport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportServer).ListPassport(ctx, req.(*ListPassportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Passport_ServiceDesc is the grpc.ServiceDesc for Passport service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Passport_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "passport.v1.Passport",
	HandlerType: (*PassportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePassport",
			Handler:    _Passport_CreatePassport_Handler,
		},
		{
			MethodName: "DeletePassport",
			Handler:    _Passport_DeletePassport_Handler,
		},
		{
			MethodName: "GetPassport",
			Handler:    _Passport_GetPassport_Handler,
		},
		{
			MethodName: "UpdatePassport",
			Handler:    _Passport_UpdatePassport_Handler,
		},
		{
			MethodName: "ListPassport",
			Handler:    _Passport_ListPassport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/passport/v1/passport.proto",
}
