// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/passport/v1/passport.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreatePassportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePassportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePassportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePassportRequestMultiError, or nil if none found.
func (m *CreatePassportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePassportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreatePassportRequestMultiError(errors)
	}

	return nil
}

// CreatePassportRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePassportRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePassportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePassportRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePassportRequestMultiError) AllErrors() []error { return m }

// CreatePassportRequestValidationError is the validation error returned by
// CreatePassportRequest.Validate if the designated constraints aren't met.
type CreatePassportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePassportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePassportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePassportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePassportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePassportRequestValidationError) ErrorName() string {
	return "CreatePassportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePassportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePassportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePassportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePassportRequestValidationError{}

// Validate checks the field values on CreatePassportReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePassportReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePassportReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePassportReplyMultiError, or nil if none found.
func (m *CreatePassportReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePassportReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreatePassportReplyMultiError(errors)
	}

	return nil
}

// CreatePassportReplyMultiError is an error wrapping multiple validation
// errors returned by CreatePassportReply.ValidateAll() if the designated
// constraints aren't met.
type CreatePassportReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePassportReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePassportReplyMultiError) AllErrors() []error { return m }

// CreatePassportReplyValidationError is the validation error returned by
// CreatePassportReply.Validate if the designated constraints aren't met.
type CreatePassportReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePassportReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePassportReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePassportReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePassportReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePassportReplyValidationError) ErrorName() string {
	return "CreatePassportReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePassportReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePassportReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePassportReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePassportReplyValidationError{}

// Validate checks the field values on DeletePassportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePassportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePassportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePassportRequestMultiError, or nil if none found.
func (m *DeletePassportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePassportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeletePassportRequestMultiError(errors)
	}

	return nil
}

// DeletePassportRequestMultiError is an error wrapping multiple validation
// errors returned by DeletePassportRequest.ValidateAll() if the designated
// constraints aren't met.
type DeletePassportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePassportRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePassportRequestMultiError) AllErrors() []error { return m }

// DeletePassportRequestValidationError is the validation error returned by
// DeletePassportRequest.Validate if the designated constraints aren't met.
type DeletePassportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePassportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePassportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePassportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePassportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePassportRequestValidationError) ErrorName() string {
	return "DeletePassportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePassportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePassportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePassportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePassportRequestValidationError{}

// Validate checks the field values on DeletePassportReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePassportReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePassportReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePassportReplyMultiError, or nil if none found.
func (m *DeletePassportReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePassportReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeletePassportReplyMultiError(errors)
	}

	return nil
}

// DeletePassportReplyMultiError is an error wrapping multiple validation
// errors returned by DeletePassportReply.ValidateAll() if the designated
// constraints aren't met.
type DeletePassportReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePassportReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePassportReplyMultiError) AllErrors() []error { return m }

// DeletePassportReplyValidationError is the validation error returned by
// DeletePassportReply.Validate if the designated constraints aren't met.
type DeletePassportReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePassportReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePassportReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePassportReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePassportReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePassportReplyValidationError) ErrorName() string {
	return "DeletePassportReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePassportReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePassportReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePassportReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePassportReplyValidationError{}

// Validate checks the field values on GetPassportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPassportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPassportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPassportRequestMultiError, or nil if none found.
func (m *GetPassportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPassportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetPassportRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetPassportRequestMultiError(errors)
	}

	return nil
}

// GetPassportRequestMultiError is an error wrapping multiple validation errors
// returned by GetPassportRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPassportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPassportRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPassportRequestMultiError) AllErrors() []error { return m }

// GetPassportRequestValidationError is the validation error returned by
// GetPassportRequest.Validate if the designated constraints aren't met.
type GetPassportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPassportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPassportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPassportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPassportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPassportRequestValidationError) ErrorName() string {
	return "GetPassportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPassportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPassportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPassportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPassportRequestValidationError{}

// Validate checks the field values on GetPassportReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPassportReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPassportReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPassportReplyMultiError, or nil if none found.
func (m *GetPassportReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPassportReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetPassportReplyMultiError(errors)
	}

	return nil
}

// GetPassportReplyMultiError is an error wrapping multiple validation errors
// returned by GetPassportReply.ValidateAll() if the designated constraints
// aren't met.
type GetPassportReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPassportReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPassportReplyMultiError) AllErrors() []error { return m }

// GetPassportReplyValidationError is the validation error returned by
// GetPassportReply.Validate if the designated constraints aren't met.
type GetPassportReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPassportReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPassportReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPassportReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPassportReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPassportReplyValidationError) ErrorName() string { return "GetPassportReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetPassportReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPassportReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPassportReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPassportReplyValidationError{}

// Validate checks the field values on UpdatePassportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePassportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePassportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePassportRequestMultiError, or nil if none found.
func (m *UpdatePassportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePassportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdatePassportRequestMultiError(errors)
	}

	return nil
}

// UpdatePassportRequestMultiError is an error wrapping multiple validation
// errors returned by UpdatePassportRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdatePassportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePassportRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePassportRequestMultiError) AllErrors() []error { return m }

// UpdatePassportRequestValidationError is the validation error returned by
// UpdatePassportRequest.Validate if the designated constraints aren't met.
type UpdatePassportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePassportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePassportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePassportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePassportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePassportRequestValidationError) ErrorName() string {
	return "UpdatePassportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePassportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePassportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePassportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePassportRequestValidationError{}

// Validate checks the field values on UpdatePassportReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePassportReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePassportReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePassportReplyMultiError, or nil if none found.
func (m *UpdatePassportReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePassportReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdatePassportReplyMultiError(errors)
	}

	return nil
}

// UpdatePassportReplyMultiError is an error wrapping multiple validation
// errors returned by UpdatePassportReply.ValidateAll() if the designated
// constraints aren't met.
type UpdatePassportReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePassportReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePassportReplyMultiError) AllErrors() []error { return m }

// UpdatePassportReplyValidationError is the validation error returned by
// UpdatePassportReply.Validate if the designated constraints aren't met.
type UpdatePassportReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePassportReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePassportReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePassportReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePassportReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePassportReplyValidationError) ErrorName() string {
	return "UpdatePassportReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePassportReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePassportReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePassportReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePassportReplyValidationError{}

// Validate checks the field values on ListPassportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPassportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPassportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPassportRequestMultiError, or nil if none found.
func (m *ListPassportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPassportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListPassportRequestMultiError(errors)
	}

	return nil
}

// ListPassportRequestMultiError is an error wrapping multiple validation
// errors returned by ListPassportRequest.ValidateAll() if the designated
// constraints aren't met.
type ListPassportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPassportRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPassportRequestMultiError) AllErrors() []error { return m }

// ListPassportRequestValidationError is the validation error returned by
// ListPassportRequest.Validate if the designated constraints aren't met.
type ListPassportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPassportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPassportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPassportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPassportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPassportRequestValidationError) ErrorName() string {
	return "ListPassportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPassportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPassportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPassportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPassportRequestValidationError{}

// Validate checks the field values on ListPassportReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListPassportReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPassportReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPassportReplyMultiError, or nil if none found.
func (m *ListPassportReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPassportReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListPassportReplyMultiError(errors)
	}

	return nil
}

// ListPassportReplyMultiError is an error wrapping multiple validation errors
// returned by ListPassportReply.ValidateAll() if the designated constraints
// aren't met.
type ListPassportReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPassportReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPassportReplyMultiError) AllErrors() []error { return m }

// ListPassportReplyValidationError is the validation error returned by
// ListPassportReply.Validate if the designated constraints aren't met.
type ListPassportReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPassportReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPassportReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPassportReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPassportReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPassportReplyValidationError) ErrorName() string {
	return "ListPassportReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListPassportReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPassportReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPassportReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPassportReplyValidationError{}
