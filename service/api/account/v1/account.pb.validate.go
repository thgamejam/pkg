// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/account/v1/account.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateEMailAccountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEMailAccountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEMailAccountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEMailAccountReqMultiError, or nil if none found.
func (m *CreateEMailAccountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEMailAccountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetCiphertext()); l < 64 || l > 256 {
		err := CreateEMailAccountReqValidationError{
			field:  "Ciphertext",
			reason: "value length must be between 64 and 256 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetHash()) != 16 {
		err := CreateEMailAccountReqValidationError{
			field:  "Hash",
			reason: "value length must be 16 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if utf8.RuneCountInString(m.GetEmail()) > 32 {
		err := CreateEMailAccountReqValidationError{
			field:  "Email",
			reason: "value length must be at most 32 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = CreateEMailAccountReqValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateEMailAccountReqMultiError(errors)
	}

	return nil
}

func (m *CreateEMailAccountReq) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *CreateEMailAccountReq) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// CreateEMailAccountReqMultiError is an error wrapping multiple validation
// errors returned by CreateEMailAccountReq.ValidateAll() if the designated
// constraints aren't met.
type CreateEMailAccountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEMailAccountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEMailAccountReqMultiError) AllErrors() []error { return m }

// CreateEMailAccountReqValidationError is the validation error returned by
// CreateEMailAccountReq.Validate if the designated constraints aren't met.
type CreateEMailAccountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEMailAccountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEMailAccountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEMailAccountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEMailAccountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEMailAccountReqValidationError) ErrorName() string {
	return "CreateEMailAccountReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEMailAccountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEMailAccountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEMailAccountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEMailAccountReqValidationError{}

// Validate checks the field values on CreateEMailAccountReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEMailAccountReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEMailAccountReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEMailAccountReplyMultiError, or nil if none found.
func (m *CreateEMailAccountReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEMailAccountReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateEMailAccountReplyMultiError(errors)
	}

	return nil
}

// CreateEMailAccountReplyMultiError is an error wrapping multiple validation
// errors returned by CreateEMailAccountReply.ValidateAll() if the designated
// constraints aren't met.
type CreateEMailAccountReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEMailAccountReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEMailAccountReplyMultiError) AllErrors() []error { return m }

// CreateEMailAccountReplyValidationError is the validation error returned by
// CreateEMailAccountReply.Validate if the designated constraints aren't met.
type CreateEMailAccountReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEMailAccountReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEMailAccountReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEMailAccountReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEMailAccountReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEMailAccountReplyValidationError) ErrorName() string {
	return "CreateEMailAccountReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEMailAccountReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEMailAccountReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEMailAccountReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEMailAccountReplyValidationError{}

// Validate checks the field values on GetAccountReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetAccountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetAccountReqMultiError, or
// nil if none found.
func (m *GetAccountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetAccountReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAccountReqMultiError(errors)
	}

	return nil
}

// GetAccountReqMultiError is an error wrapping multiple validation errors
// returned by GetAccountReq.ValidateAll() if the designated constraints
// aren't met.
type GetAccountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountReqMultiError) AllErrors() []error { return m }

// GetAccountReqValidationError is the validation error returned by
// GetAccountReq.Validate if the designated constraints aren't met.
type GetAccountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountReqValidationError) ErrorName() string { return "GetAccountReqValidationError" }

// Error satisfies the builtin error interface
func (e GetAccountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountReqValidationError{}

// Validate checks the field values on GetAccountReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAccountReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountReplyMultiError, or nil if none found.
func (m *GetAccountReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for Email

	// no validation rules for TelCode

	// no validation rules for Phone

	// no validation rules for Status

	// no validation rules for UserID

	if len(errors) > 0 {
		return GetAccountReplyMultiError(errors)
	}

	return nil
}

// GetAccountReplyMultiError is an error wrapping multiple validation errors
// returned by GetAccountReply.ValidateAll() if the designated constraints
// aren't met.
type GetAccountReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountReplyMultiError) AllErrors() []error { return m }

// GetAccountReplyValidationError is the validation error returned by
// GetAccountReply.Validate if the designated constraints aren't met.
type GetAccountReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountReplyValidationError) ErrorName() string { return "GetAccountReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetAccountReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountReplyValidationError{}

// Validate checks the field values on ExistAccountEMailReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExistAccountEMailReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExistAccountEMailReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExistAccountEMailReqMultiError, or nil if none found.
func (m *ExistAccountEMailReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ExistAccountEMailReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEmail()) > 32 {
		err := ExistAccountEMailReqValidationError{
			field:  "Email",
			reason: "value length must be at most 32 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = ExistAccountEMailReqValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ExistAccountEMailReqMultiError(errors)
	}

	return nil
}

func (m *ExistAccountEMailReq) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *ExistAccountEMailReq) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// ExistAccountEMailReqMultiError is an error wrapping multiple validation
// errors returned by ExistAccountEMailReq.ValidateAll() if the designated
// constraints aren't met.
type ExistAccountEMailReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExistAccountEMailReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExistAccountEMailReqMultiError) AllErrors() []error { return m }

// ExistAccountEMailReqValidationError is the validation error returned by
// ExistAccountEMailReq.Validate if the designated constraints aren't met.
type ExistAccountEMailReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExistAccountEMailReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExistAccountEMailReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExistAccountEMailReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExistAccountEMailReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExistAccountEMailReqValidationError) ErrorName() string {
	return "ExistAccountEMailReqValidationError"
}

// Error satisfies the builtin error interface
func (e ExistAccountEMailReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExistAccountEMailReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExistAccountEMailReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExistAccountEMailReqValidationError{}

// Validate checks the field values on ExistAccountEMailReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExistAccountEMailReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExistAccountEMailReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExistAccountEMailReplyMultiError, or nil if none found.
func (m *ExistAccountEMailReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ExistAccountEMailReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ok

	if len(errors) > 0 {
		return ExistAccountEMailReplyMultiError(errors)
	}

	return nil
}

// ExistAccountEMailReplyMultiError is an error wrapping multiple validation
// errors returned by ExistAccountEMailReply.ValidateAll() if the designated
// constraints aren't met.
type ExistAccountEMailReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExistAccountEMailReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExistAccountEMailReplyMultiError) AllErrors() []error { return m }

// ExistAccountEMailReplyValidationError is the validation error returned by
// ExistAccountEMailReply.Validate if the designated constraints aren't met.
type ExistAccountEMailReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExistAccountEMailReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExistAccountEMailReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExistAccountEMailReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExistAccountEMailReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExistAccountEMailReplyValidationError) ErrorName() string {
	return "ExistAccountEMailReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ExistAccountEMailReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExistAccountEMailReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExistAccountEMailReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExistAccountEMailReplyValidationError{}

// Validate checks the field values on VerifyPasswordReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VerifyPasswordReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyPasswordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyPasswordReqMultiError, or nil if none found.
func (m *VerifyPasswordReq) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyPasswordReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUsername()); l < 4 || l > 32 {
		err := VerifyPasswordReqValidationError{
			field:  "Username",
			reason: "value length must be between 4 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCiphertext()); l < 64 || l > 256 {
		err := VerifyPasswordReqValidationError{
			field:  "Ciphertext",
			reason: "value length must be between 64 and 256 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetHash()) != 16 {
		err := VerifyPasswordReqValidationError{
			field:  "Hash",
			reason: "value length must be 16 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return VerifyPasswordReqMultiError(errors)
	}

	return nil
}

// VerifyPasswordReqMultiError is an error wrapping multiple validation errors
// returned by VerifyPasswordReq.ValidateAll() if the designated constraints
// aren't met.
type VerifyPasswordReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyPasswordReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyPasswordReqMultiError) AllErrors() []error { return m }

// VerifyPasswordReqValidationError is the validation error returned by
// VerifyPasswordReq.Validate if the designated constraints aren't met.
type VerifyPasswordReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyPasswordReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyPasswordReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyPasswordReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyPasswordReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyPasswordReqValidationError) ErrorName() string {
	return "VerifyPasswordReqValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyPasswordReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyPasswordReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyPasswordReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyPasswordReqValidationError{}

// Validate checks the field values on VerifyPasswordReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyPasswordReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyPasswordReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyPasswordReplyMultiError, or nil if none found.
func (m *VerifyPasswordReply) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyPasswordReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return VerifyPasswordReplyMultiError(errors)
	}

	return nil
}

// VerifyPasswordReplyMultiError is an error wrapping multiple validation
// errors returned by VerifyPasswordReply.ValidateAll() if the designated
// constraints aren't met.
type VerifyPasswordReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyPasswordReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyPasswordReplyMultiError) AllErrors() []error { return m }

// VerifyPasswordReplyValidationError is the validation error returned by
// VerifyPasswordReply.Validate if the designated constraints aren't met.
type VerifyPasswordReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyPasswordReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyPasswordReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyPasswordReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyPasswordReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyPasswordReplyValidationError) ErrorName() string {
	return "VerifyPasswordReplyValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyPasswordReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyPasswordReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyPasswordReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyPasswordReplyValidationError{}

// Validate checks the field values on SavePasswordReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SavePasswordReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SavePasswordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SavePasswordReqMultiError, or nil if none found.
func (m *SavePasswordReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SavePasswordReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := SavePasswordReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCiphertext()); l < 64 || l > 256 {
		err := SavePasswordReqValidationError{
			field:  "Ciphertext",
			reason: "value length must be between 64 and 256 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetHash()) != 16 {
		err := SavePasswordReqValidationError{
			field:  "Hash",
			reason: "value length must be 16 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return SavePasswordReqMultiError(errors)
	}

	return nil
}

// SavePasswordReqMultiError is an error wrapping multiple validation errors
// returned by SavePasswordReq.ValidateAll() if the designated constraints
// aren't met.
type SavePasswordReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SavePasswordReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SavePasswordReqMultiError) AllErrors() []error { return m }

// SavePasswordReqValidationError is the validation error returned by
// SavePasswordReq.Validate if the designated constraints aren't met.
type SavePasswordReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SavePasswordReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SavePasswordReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SavePasswordReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SavePasswordReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SavePasswordReqValidationError) ErrorName() string { return "SavePasswordReqValidationError" }

// Error satisfies the builtin error interface
func (e SavePasswordReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSavePasswordReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SavePasswordReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SavePasswordReqValidationError{}

// Validate checks the field values on SavePasswordReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SavePasswordReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SavePasswordReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SavePasswordReplyMultiError, or nil if none found.
func (m *SavePasswordReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SavePasswordReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SavePasswordReplyMultiError(errors)
	}

	return nil
}

// SavePasswordReplyMultiError is an error wrapping multiple validation errors
// returned by SavePasswordReply.ValidateAll() if the designated constraints
// aren't met.
type SavePasswordReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SavePasswordReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SavePasswordReplyMultiError) AllErrors() []error { return m }

// SavePasswordReplyValidationError is the validation error returned by
// SavePasswordReply.Validate if the designated constraints aren't met.
type SavePasswordReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SavePasswordReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SavePasswordReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SavePasswordReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SavePasswordReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SavePasswordReplyValidationError) ErrorName() string {
	return "SavePasswordReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SavePasswordReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSavePasswordReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SavePasswordReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SavePasswordReplyValidationError{}

// Validate checks the field values on BindUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BindUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BindUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BindUserReqMultiError, or
// nil if none found.
func (m *BindUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *BindUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := BindUserReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserID() <= 0 {
		err := BindUserReqValidationError{
			field:  "UserID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BindUserReqMultiError(errors)
	}

	return nil
}

// BindUserReqMultiError is an error wrapping multiple validation errors
// returned by BindUserReq.ValidateAll() if the designated constraints aren't met.
type BindUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BindUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BindUserReqMultiError) AllErrors() []error { return m }

// BindUserReqValidationError is the validation error returned by
// BindUserReq.Validate if the designated constraints aren't met.
type BindUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BindUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BindUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BindUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BindUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BindUserReqValidationError) ErrorName() string { return "BindUserReqValidationError" }

// Error satisfies the builtin error interface
func (e BindUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBindUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BindUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BindUserReqValidationError{}

// Validate checks the field values on BindUserReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BindUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BindUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BindUserReplyMultiError, or
// nil if none found.
func (m *BindUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *BindUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BindUserReplyMultiError(errors)
	}

	return nil
}

// BindUserReplyMultiError is an error wrapping multiple validation errors
// returned by BindUserReply.ValidateAll() if the designated constraints
// aren't met.
type BindUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BindUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BindUserReplyMultiError) AllErrors() []error { return m }

// BindUserReplyValidationError is the validation error returned by
// BindUserReply.Validate if the designated constraints aren't met.
type BindUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BindUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BindUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BindUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BindUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BindUserReplyValidationError) ErrorName() string { return "BindUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e BindUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBindUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BindUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BindUserReplyValidationError{}

// Validate checks the field values on GetKeyReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetKeyReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetKeyReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetKeyReqMultiError, or nil
// if none found.
func (m *GetKeyReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetKeyReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetKeyReqMultiError(errors)
	}

	return nil
}

// GetKeyReqMultiError is an error wrapping multiple validation errors returned
// by GetKeyReq.ValidateAll() if the designated constraints aren't met.
type GetKeyReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetKeyReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetKeyReqMultiError) AllErrors() []error { return m }

// GetKeyReqValidationError is the validation error returned by
// GetKeyReq.Validate if the designated constraints aren't met.
type GetKeyReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKeyReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKeyReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKeyReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKeyReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKeyReqValidationError) ErrorName() string { return "GetKeyReqValidationError" }

// Error satisfies the builtin error interface
func (e GetKeyReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKeyReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKeyReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKeyReqValidationError{}

// Validate checks the field values on GetKeyReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetKeyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetKeyReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetKeyReplyMultiError, or
// nil if none found.
func (m *GetKeyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetKeyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Hash

	// no validation rules for Key

	if len(errors) > 0 {
		return GetKeyReplyMultiError(errors)
	}

	return nil
}

// GetKeyReplyMultiError is an error wrapping multiple validation errors
// returned by GetKeyReply.ValidateAll() if the designated constraints aren't met.
type GetKeyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetKeyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetKeyReplyMultiError) AllErrors() []error { return m }

// GetKeyReplyValidationError is the validation error returned by
// GetKeyReply.Validate if the designated constraints aren't met.
type GetKeyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKeyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKeyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKeyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKeyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKeyReplyValidationError) ErrorName() string { return "GetKeyReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetKeyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKeyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKeyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKeyReplyValidationError{}
