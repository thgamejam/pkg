// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: api/passport/v1/passport.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PassportClient is the client API for Passport service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PassportClient interface {
	// 预创建账户
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountReply, error)
	// 验证邮箱且创建用户
	VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailReply, error)
	// 获取密码加密公钥
	GetPublicKey(ctx context.Context, in *GetPublicKeyRequest, opts ...grpc.CallOption) (*GetPublicKeyReply, error)
	// 账户登录
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	// 修改密码
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordReply, error)
}

type passportClient struct {
	cc grpc.ClientConnInterface
}

func NewPassportClient(cc grpc.ClientConnInterface) PassportClient {
	return &passportClient{cc}
}

func (c *passportClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountReply, error) {
	out := new(CreateAccountReply)
	err := c.cc.Invoke(ctx, "/passport.v1.Passport/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportClient) VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailReply, error) {
	out := new(VerifyEmailReply)
	err := c.cc.Invoke(ctx, "/passport.v1.Passport/VerifyEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportClient) GetPublicKey(ctx context.Context, in *GetPublicKeyRequest, opts ...grpc.CallOption) (*GetPublicKeyReply, error) {
	out := new(GetPublicKeyReply)
	err := c.cc.Invoke(ctx, "/passport.v1.Passport/GetPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/passport.v1.Passport/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordReply, error) {
	out := new(ChangePasswordReply)
	err := c.cc.Invoke(ctx, "/passport.v1.Passport/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PassportServer is the server API for Passport service.
// All implementations must embed UnimplementedPassportServer
// for forward compatibility
type PassportServer interface {
	// 预创建账户
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountReply, error)
	// 验证邮箱且创建用户
	VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailReply, error)
	// 获取密码加密公钥
	GetPublicKey(context.Context, *GetPublicKeyRequest) (*GetPublicKeyReply, error)
	// 账户登录
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	// 修改密码
	ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordReply, error)
	mustEmbedUnimplementedPassportServer()
}

// UnimplementedPassportServer must be embedded to have forward compatible implementations.
type UnimplementedPassportServer struct {
}

func (UnimplementedPassportServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedPassportServer) VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedPassportServer) GetPublicKey(context.Context, *GetPublicKeyRequest) (*GetPublicKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicKey not implemented")
}
func (UnimplementedPassportServer) Login(context.Context, *LoginRequest) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedPassportServer) ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedPassportServer) mustEmbedUnimplementedPassportServer() {}

// UnsafePassportServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PassportServer will
// result in compilation errors.
type UnsafePassportServer interface {
	mustEmbedUnimplementedPassportServer()
}

func RegisterPassportServer(s grpc.ServiceRegistrar, srv PassportServer) {
	s.RegisterService(&Passport_ServiceDesc, srv)
}

func _Passport_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/passport.v1.Passport/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Passport_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/passport.v1.Passport/VerifyEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportServer).VerifyEmail(ctx, req.(*VerifyEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Passport_GetPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportServer).GetPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/passport.v1.Passport/GetPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportServer).GetPublicKey(ctx, req.(*GetPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Passport_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/passport.v1.Passport/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Passport_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/passport.v1.Passport/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Passport_ServiceDesc is the grpc.ServiceDesc for Passport service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Passport_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "passport.v1.Passport",
	HandlerType: (*PassportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _Passport_CreateAccount_Handler,
		},
		{
			MethodName: "VerifyEmail",
			Handler:    _Passport_VerifyEmail_Handler,
		},
		{
			MethodName: "GetPublicKey",
			Handler:    _Passport_GetPublicKey_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Passport_Login_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _Passport_ChangePassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/passport/v1/passport.proto",
}
