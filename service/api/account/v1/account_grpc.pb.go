// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/account/v1/account.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountClient is the client API for Account service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountClient interface {
	// 创建邮箱账号
	CreateEMailAccount(ctx context.Context, in *CreateEMailAccountReq, opts ...grpc.CallOption) (*CreateEMailAccountReply, error)
	// 使用ID获取账号
	GetAccount(ctx context.Context, in *GetAccountReq, opts ...grpc.CallOption) (*GetAccountReply, error)
	GetAccountByUserID(ctx context.Context, in *GetAccountReq, opts ...grpc.CallOption) (*GetAccountReply, error)
	// ExistAccountEMail 是否存在邮箱
	ExistAccountEMail(ctx context.Context, in *ExistAccountEMailReq, opts ...grpc.CallOption) (*ExistAccountEMailReply, error)
	// 校验密码
	VerifyPassword(ctx context.Context, in *VerifyPasswordReq, opts ...grpc.CallOption) (*VerifyPasswordReply, error)
	// 保存密码
	SavePassword(ctx context.Context, in *SavePasswordReq, opts ...grpc.CallOption) (*SavePasswordReply, error)
	// 绑定用户
	BindUser(ctx context.Context, in *BindUserReq, opts ...grpc.CallOption) (*BindUserReply, error)
	// 获取密码加密公钥
	GetKey(ctx context.Context, in *GetKeyReq, opts ...grpc.CallOption) (*GetKeyReply, error)
}

type accountClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountClient(cc grpc.ClientConnInterface) AccountClient {
	return &accountClient{cc}
}

func (c *accountClient) CreateEMailAccount(ctx context.Context, in *CreateEMailAccountReq, opts ...grpc.CallOption) (*CreateEMailAccountReply, error) {
	out := new(CreateEMailAccountReply)
	err := c.cc.Invoke(ctx, "/account.v1.Account/CreateEMailAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetAccount(ctx context.Context, in *GetAccountReq, opts ...grpc.CallOption) (*GetAccountReply, error) {
	out := new(GetAccountReply)
	err := c.cc.Invoke(ctx, "/account.v1.Account/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetAccountByUserID(ctx context.Context, in *GetAccountReq, opts ...grpc.CallOption) (*GetAccountReply, error) {
	out := new(GetAccountReply)
	err := c.cc.Invoke(ctx, "/account.v1.Account/GetAccountByUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) ExistAccountEMail(ctx context.Context, in *ExistAccountEMailReq, opts ...grpc.CallOption) (*ExistAccountEMailReply, error) {
	out := new(ExistAccountEMailReply)
	err := c.cc.Invoke(ctx, "/account.v1.Account/ExistAccountEMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) VerifyPassword(ctx context.Context, in *VerifyPasswordReq, opts ...grpc.CallOption) (*VerifyPasswordReply, error) {
	out := new(VerifyPasswordReply)
	err := c.cc.Invoke(ctx, "/account.v1.Account/VerifyPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) SavePassword(ctx context.Context, in *SavePasswordReq, opts ...grpc.CallOption) (*SavePasswordReply, error) {
	out := new(SavePasswordReply)
	err := c.cc.Invoke(ctx, "/account.v1.Account/SavePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) BindUser(ctx context.Context, in *BindUserReq, opts ...grpc.CallOption) (*BindUserReply, error) {
	out := new(BindUserReply)
	err := c.cc.Invoke(ctx, "/account.v1.Account/BindUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetKey(ctx context.Context, in *GetKeyReq, opts ...grpc.CallOption) (*GetKeyReply, error) {
	out := new(GetKeyReply)
	err := c.cc.Invoke(ctx, "/account.v1.Account/GetKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServer is the server API for Account service.
// All implementations must embed UnimplementedAccountServer
// for forward compatibility
type AccountServer interface {
	// 创建邮箱账号
	CreateEMailAccount(context.Context, *CreateEMailAccountReq) (*CreateEMailAccountReply, error)
	// 使用ID获取账号
	GetAccount(context.Context, *GetAccountReq) (*GetAccountReply, error)
	GetAccountByUserID(context.Context, *GetAccountReq) (*GetAccountReply, error)
	// ExistAccountEMail 是否存在邮箱
	ExistAccountEMail(context.Context, *ExistAccountEMailReq) (*ExistAccountEMailReply, error)
	// 校验密码
	VerifyPassword(context.Context, *VerifyPasswordReq) (*VerifyPasswordReply, error)
	// 保存密码
	SavePassword(context.Context, *SavePasswordReq) (*SavePasswordReply, error)
	// 绑定用户
	BindUser(context.Context, *BindUserReq) (*BindUserReply, error)
	// 获取密码加密公钥
	GetKey(context.Context, *GetKeyReq) (*GetKeyReply, error)
	mustEmbedUnimplementedAccountServer()
}

// UnimplementedAccountServer must be embedded to have forward compatible implementations.
type UnimplementedAccountServer struct {
}

func (UnimplementedAccountServer) CreateEMailAccount(context.Context, *CreateEMailAccountReq) (*CreateEMailAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEMailAccount not implemented")
}
func (UnimplementedAccountServer) GetAccount(context.Context, *GetAccountReq) (*GetAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedAccountServer) GetAccountByUserID(context.Context, *GetAccountReq) (*GetAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountByUserID not implemented")
}
func (UnimplementedAccountServer) ExistAccountEMail(context.Context, *ExistAccountEMailReq) (*ExistAccountEMailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAccountEMail not implemented")
}
func (UnimplementedAccountServer) VerifyPassword(context.Context, *VerifyPasswordReq) (*VerifyPasswordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPassword not implemented")
}
func (UnimplementedAccountServer) SavePassword(context.Context, *SavePasswordReq) (*SavePasswordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePassword not implemented")
}
func (UnimplementedAccountServer) BindUser(context.Context, *BindUserReq) (*BindUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindUser not implemented")
}
func (UnimplementedAccountServer) GetKey(context.Context, *GetKeyReq) (*GetKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKey not implemented")
}
func (UnimplementedAccountServer) mustEmbedUnimplementedAccountServer() {}

// UnsafeAccountServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServer will
// result in compilation errors.
type UnsafeAccountServer interface {
	mustEmbedUnimplementedAccountServer()
}

func RegisterAccountServer(s grpc.ServiceRegistrar, srv AccountServer) {
	s.RegisterService(&Account_ServiceDesc, srv)
}

func _Account_CreateEMailAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEMailAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).CreateEMailAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.v1.Account/CreateEMailAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).CreateEMailAccount(ctx, req.(*CreateEMailAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.v1.Account/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetAccount(ctx, req.(*GetAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetAccountByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetAccountByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.v1.Account/GetAccountByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetAccountByUserID(ctx, req.(*GetAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_ExistAccountEMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAccountEMailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).ExistAccountEMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.v1.Account/ExistAccountEMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).ExistAccountEMail(ctx, req.(*ExistAccountEMailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_VerifyPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).VerifyPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.v1.Account/VerifyPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).VerifyPassword(ctx, req.(*VerifyPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_SavePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SavePasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).SavePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.v1.Account/SavePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).SavePassword(ctx, req.(*SavePasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_BindUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).BindUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.v1.Account/BindUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).BindUser(ctx, req.(*BindUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.v1.Account/GetKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetKey(ctx, req.(*GetKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Account_ServiceDesc is the grpc.ServiceDesc for Account service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Account_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.v1.Account",
	HandlerType: (*AccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEMailAccount",
			Handler:    _Account_CreateEMailAccount_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _Account_GetAccount_Handler,
		},
		{
			MethodName: "GetAccountByUserID",
			Handler:    _Account_GetAccountByUserID_Handler,
		},
		{
			MethodName: "ExistAccountEMail",
			Handler:    _Account_ExistAccountEMail_Handler,
		},
		{
			MethodName: "VerifyPassword",
			Handler:    _Account_VerifyPassword_Handler,
		},
		{
			MethodName: "SavePassword",
			Handler:    _Account_SavePassword_Handler,
		},
		{
			MethodName: "BindUser",
			Handler:    _Account_BindUser_Handler,
		},
		{
			MethodName: "GetKey",
			Handler:    _Account_GetKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/account/v1/account.proto",
}
